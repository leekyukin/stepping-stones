// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Item {
  id              String   @id @default(uuid())
  name            String   @unique
  price           Int
  description     String
  discountRate    Int
  thumbnailImage  String
  itemImages      String[]
  category        String
  numberOfStones  Int
  status          ItemStatus
  createdAt       DateTime @default(now())
  cartItems       CartItem[]
}

enum ItemStatus {
  SOLD_OUT
  PREPARING
  SELLING
}

model CartItem {
  id        String @id @default(uuid())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  item      Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String

  order     Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String?

  createdAt DateTime @default(now())
}

model Order {
  id        String @id @default(uuid())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  cartItems CartItem[]
  status    OrderStatus
  createdAt DateTime @default(now())
}

enum OrderStatus {
  BEGIN_CHECKOUT
  PURCHASE
  PREPARING
  DELIVERING
  DELIVERY_COMPLETED
}

model User {
  id            String    @id @default(uuid())
  name          String
  image         String
  email         String?   @unique
  phone         String?   @unique
  role          Role      @default(USER)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  cartItems     CartItem[]
  orders        Order[]

  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                       String  @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}